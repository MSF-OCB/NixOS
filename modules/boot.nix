
########################################################################
#                                                                      #
# DO NOT EDIT THIS FILE, ALL EDITS SHOULD BE DONE IN THE GIT REPO,     #
# PUSHED TO GITHUB AND PULLED HERE.                                    #
#                                                                      #
# LOCAL EDITS WILL BE OVERWRITTEN.                                     #
#                                                                      #
########################################################################

{ config, lib, ...}:

let
  cfg = config.settings.boot;
  modes = { legacy = "legacy"; uefi = "uefi"; none = "none"; };
in

with lib;

{
  options = {
    settings.boot = {
      mode = mkOption {
        type = types.enum [ modes.legacy modes.uefi modes.none ];
        description = ''
          Boot in either legacy or UEFI mode.
        '';
      };

      device = mkOption {
        default = "nodev";
        type = types.str;
        description = ''
          The device to install GRUB to in legacy mode.
        '';
      };

      separate_partition = mkOption {
        default = true;
        type = types.bool;
        description = ''
          Whether /boot is a separate partition.
        '';
      };
    };
  };

  config.boot = {
    growPartition = true;
    cleanTmpDir   = true;
    tmpOnTmpfs    = true;

    loader = let
      mode = cfg.mode;
      grub_common = {
        enable = true;
        version = 2;
        memtest86.enable = true;
      };
    in mkIf (mode != modes.none) (mkMerge [
      (mkIf (mode == modes.legacy) {
        grub = grub_common // {
          efiSupport = false;
          device = cfg.device;
        };
      })
      (mkIf (mode == modes.uefi) {
        grub = grub_common // {
          efiSupport = true;
          efiInstallAsRemovable = true;
          device = "nodev";
        };
        efi.efiSysMountPoint = "/boot/efi";
      })
    ]);

    kernelParams = [
      # Overwrite free'd memory
      #"page_poison=1"

      # Disable legacy virtual syscalls, this can cause issues with older Docker images
      #"vsyscall=none"

      # Disable hibernation (allows replacing the running kernel)
      "nohibernate"
    ];

    kernel.sysctl = {
      # Prevent replacing the running kernel image w/o reboot
      "kernel.kexec_load_disabled" = true;

      # Reboot after 10 min following a kernel panic
      "kernel.panic" = "10";

      # Disable bpf() JIT (to eliminate spray attacks)
      #"net.core.bpf_jit_enable" = mkDefault false;

      # ... or at least apply some hardening to it
      "net.core.bpf_jit_harden" = true;

      # Raise ASLR entropy
      "vm.mmap_rnd_bits" = 32;
    };
  };
}

