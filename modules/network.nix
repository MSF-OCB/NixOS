
########################################################################
#                                                                      #
# DO NOT EDIT THIS FILE, ALL EDITS SHOULD BE DONE IN THE GIT REPO,     #
# PUSHED TO GITHUB AND PULLED HERE.                                    #
#                                                                      #
# LOCAL EDITS WILL BE OVERWRITTEN.                                     #
#                                                                      #
########################################################################

{ config, lib, ...}:

with lib;

let
  cfg = config.settings.network;

  ifaceOpts = { name, ... }: {
    options = {
      enable = mkOption {
        type    = types.bool;
        default = true;
      };

      iface = mkOption {
        type = types.str;
        description = ''
          Interface name, defaults to the name of this entry in the attribute set.
        '';
      };

      fallback = mkOption {
        type    = types.bool;
        default = true;
        description = ''
          Select this static config only as a fallback in case DHCP fails.
          No DHCP request will be send out when this option is set to false!
        '';
      };

      address = mkOption {
        type = types.str;
      };

      prefix_length = mkOption {
        type = types.ints.between 0 32;
      };

      gateway = mkOption {
        type = types.str;
      };
      
      nameservers = mkOption {
        type    = with types; listOf str;
        default = [];
        description = ''
          DNS servers which will be configured only when this static configuration is selected.
        '';
      };
    };

    config = {
      iface = mkDefault name;
    };
  };
in {
  options = {
    settings.network = {
      host_name = mkOption {
        type = types.str;
      };

      static_ifaces = mkOption {
        type    = with types; attrsOf (submodule ifaceOpts);
        default = {};
      };

      nameservers = mkOption {
        type    = with types; listOf str;
        default = [];
        description = "Globally defined DNS servers, in addition to those obtained by DHCP.";
      };
    };
  };

  config = {
    networking = {
      hostName = mkForce cfg.host_name;
      # All non-manually configured interfaces are configured by DHCP.
      useDHCP = true;
      dhcpcd = {
        persistent = true;
        # Per the manpage, interfaces matching these but also
        # matching a pattern in denyInterfaces, are still denied
        allowInterfaces = [ "en*" "wl*" ];
        # See: https://wiki.archlinux.org/index.php/Dhcpcd#dhcpcd_and_systemd_network_interfaces
        # We also ignore veth interfaces and the docker bridge, these are managed by Docker
        denyInterfaces  = [ "eth*" "wlan*" "veth*" "docker*" ];
        extraConfig = let
          format_name_servers = concatStringsSep " ";
          make_config = iface: conf: if conf.fallback then ''
                                       profile static_${iface}
                                       static ip_address=${conf.address}/${toString conf.prefix_length}
                                       static routers=${conf.gateway}
                                       static domain_name_servers=${format_name_servers conf.nameservers}

                                       # fallback to static profile on ${iface}
                                       interface ${iface}
                                       fallback static_${iface}
                                     '' else ''
                                       interface ${iface}
                                       static ip_address=${conf.address}/${toString conf.prefix_length} 
                                       static routers=${conf.gateway}
                                       static domain_name_servers=${format_name_servers conf.nameservers}
                                     '';
        in concatStringsSep "\n\n" (mapAttrsToList make_config (filterAttrs (_: conf: conf.enable) cfg.static_ifaces));
      };
      nameservers = cfg.nameservers;
    };
  };
}

