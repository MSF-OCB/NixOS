name: NixOS build and deploy config

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
      - action_caching
    paths-ignore:
      - 'install.sh'
      - 'scripts/**'
      - 'rescue_iso/**'
      - 'README.md'
      - '.gitignore'
      - '.github/workflows/build_iso.yml'

jobs:

  build:
    runs-on: 'ubuntu-latest'
    strategy:
      matrix:
        group_id: [ 0, 1, 2, 3, 4 ]
    steps:
      - name: Checkout the NixOS repo
        uses: 'actions/checkout@v2'

      - name: Checkout the Nixos-OCB-Config repo
        uses: 'actions/checkout@v2'
        with:
          repository: 'msf-ocb/nixos-ocb-config'
          path: 'org-config'
          ssh-key: '${{ secrets.NIXOS_OCB_CONFIG_DEPLOY_KEY }}'

      - name: Install the Nix package manager
        uses: 'cachix/install-nix-action@master'
        with:
          nix_path: 'nixpkgs=https://nix-channel-redirect.ocb.msf.org/nixexprs.tar.xz'

      - name: Restore the cached nix store
        id: cache-nix-store
        uses: 'actions/cache@v2'
        env:
          cache-name: 'cache-nix-store'
        with:
          path: '~/nix_store_copy'
          key: ${{ env.cache-name }}-builder-id-${{ matrix.group_id }}-${{ github.run_id }}
          restore-keys: |
            ${{ env.cache-name }}-builder-id-${{ matrix.group_id }}-
            ${{ env.cache-name }}-builder-id-

      - name: Create an empty nix store when no cache hit
        if: steps.cache-nix-store.outputs.cache-hit != 'true'
        run: |
          mkdir --parent ~/nix_store_copy

      - name: Sync the restored nix store
        run: |
          sudo rsync --archive --hard-links ~/nix_store_copy /nix/store

      - name: Configure the Panic Button Cachix cache
        uses: 'cachix/cachix-action@master'
        with:
          name: 'panic-button'
          skipPush: true

#      - name: Build the NixOS configurations
#        run: './.github/scripts/build.py --group_amount 5 --group_id ${{ matrix.group_id }}'

      - name: Sync the new nix store back
        run: |
          sudo rsync --archive --hard-links /nix/store ~/nix_store_copy


  deploy:
    runs-on: 'ubuntu-latest'
    needs: build
    if: >-
      github.event_name != 'pull_request' &&
      github.ref == 'refs/heads/master'
    steps:
      - name: Auto-deploy the NixOS config to the requested servers
        uses: 'msf-ocb/nixos-deploy@master'
        with:
          nixos_robot_key: '${{ secrets.NIXOS_ROBOT_KEY }}'
          nixos_deploy_service: 'nixos_rebuild_config.service'


