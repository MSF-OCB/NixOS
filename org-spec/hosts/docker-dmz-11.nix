########################################################################
#                                                                      #
# DO NOT EDIT THIS FILE, ALL EDITS SHOULD BE DONE IN THE GIT REPO,     #
# PUSHED TO GITHUB AND PULLED HERE.                                    #
#                                                                      #
# LOCAL EDITS WILL BE OVERWRITTEN.                                     #
#                                                                      #
########################################################################

{ lib, pkgs, ... }:

with lib;

{
  time.timeZone = "Europe/Brussels";

  boot.kernel.sysctl = {
    # Required for ElasticSearch
    "vm.max_map_count" = 262144;
  };

  settings = {
    boot.mode = "uefi";
    reverse_tunnel.enable = true;
    crypto.encrypted_opt.enable = true;
    vmware = {
      enable = true;
      inDMZ = true;
    };
    docker.enable = true;
    docker.swarm.enable = true;
    packages.python_package =
      (pkgs.python3.withPackages (python_pkgs: [
        python_pkgs.docker
      ]));
    network = {
      host_name = "docker-dmz-11";
      static_ifaces.ens192 = {
        address = "192.168.50.243";
        prefix_length = 24;
        gateway = "192.168.50.1";
        fallback = false;
      };
    };
  };
  systemd = {
    mounts = let
      mkMount = what: where: {
        enable = true;
        what = "diggr-nfs.ocb.msf.org:/exports/${what}";
        where = concatStringsSep "/" ([ "/opt" "diggr_data" ] ++ where);
        type = "nfs4";
        options = "proto=tcp,auto,_netdev";
        after = [ "network.target" ];
        wantedBy = [ "multi-user.target" ];
      };
    in mapAttrsToList mkMount {
      diggr_other = [];
      esdata      = [ "elasticsearch" ];
      esbackup    = [ "elasticsearch" "backup" ];
      esproxy     = [ "esproxy" ];
    };
    services.diggr_restart_esproxy_service = {
      startAt = "12:00";
      serviceConfig.Type = "oneshot";
      script = ''
        ${pkgs.docker}/bin/docker service update a2n-esproxy-external --quiet --force
        ${pkgs.docker}/bin/docker service update a2n-esproxy-internal --quiet --force
      '';
    };
  };
}

