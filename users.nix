
########################################################################
#                                                                      #
# DO NOT EDIT THIS FILE, ALL EDITS SHOULD BE DONE IN THE GIT REPO,     #
# PUSHED TO GITHUB AND PULLED HERE.                                    #
#                                                                      #
# LOCAL EDITS WILL BE OVERWRITTEN.                                     #
#                                                                      #
########################################################################

{ config, lib, pkgs, ... }:

with lib;

let

  userOpts = { name, config, ... }: {

    options = {

      name = mkOption {
        type = types.str;
      };

      enable = mkOption {
        type    = types.bool;
        default = false;
      };

      extraGroups = mkOption {
        type    = with types; listOf str;
        default = [];
      };

      hasShell = mkOption {
        type    = types.bool;
        default = false;
      };

      canTunnel = mkOption {
        type    = types.bool;
        default = false;
      };

    };

    config = {
      name = mkDefault name;
    };
  };

in {

  options = {

    settings.users = mkOption {
      type    = with types; loaOf (submodule userOpts);
      default = [];
    };

  };

  config = let
    toKeyPath = name: ./keys + ("/" + name);
  in {

    users.users = mapAttrs (name: user: {
      name         = name;
      isNormalUser = user.hasShell;
      extraGroups  = user.extraGroups;
      shell        = mkIf (!user.hasShell) pkgs.nologin;
      openssh.authorizedKeys.keyFiles = [ (toKeyPath name) ];
    }) (filterAttrs (_: user: user.enable) config.settings.users);

    settings.reverse_tunnel.relay.tunneller.keyFiles =
      mapAttrsToList (name: _: toKeyPath name)
        (filterAttrs (_: user: user.canTunnel) config.settings.users);

  };

}

